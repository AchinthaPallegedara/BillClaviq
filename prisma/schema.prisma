datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String     @id @default(uuid()) @map("_id")
  clerkId     String     @unique
  cName       String
  cEmail      String
  cPhone      String
  cAddress    String
  cCity       String
  cProvince   String
  cPostalCode String
  cCountry    String
  cWebsite    String?
  cLogo       String?
  Invoice     Invoice[]
  Customers   Customer[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Customer {
  id           String    @id @default(uuid()) @map("_id")
  name         String
  company      String?
  phone        String
  address      String?
  email        String?
  moreInfo     String?
  invoice      Invoice[]
  customerOf   User      @relation(fields: [customerOfId], references: [id], onDelete: Cascade)
  customerOfId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Invoice {
  id            String        @id @default(uuid()) @map("_id")
  invoiceNumber String        @unique
  issueDate     DateTime
  dueDate       DateTime?
  status        InvoiceStatus @default(DRAFT)
  Items         Items[]
  discount      Float?        @default(0.00)
  tax           Float?        @default(0.00)
  subtotal      Float
  total         Float
  to            Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String
  from          User          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Items {
  id          String  @id @default(uuid()) @map("_id")
  description String?
  quantity    Int     @default(1)
  price       Float
  Invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
}

enum InvoiceStatus {
  DRAFT
  PAID
  OVERDUE
  PENDING
}
